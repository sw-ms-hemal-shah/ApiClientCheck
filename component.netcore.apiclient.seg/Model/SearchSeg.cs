/* 
 * Seg API
 *
 * Provide API for Manage Segs
 *
 * OpenAPI spec version: 1.0
 * Contact: vpatel@alliantcreditunion.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = component.netcore.apiclient.seg.Client.SwaggerDateConverter;

namespace component.netcore.apiclient.seg.Model
{
    /// <summary>
    /// SearchSeg
    /// </summary>
    [DataContract]
    public partial class SearchSeg :  IEquatable<SearchSeg>
    {
        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UnKnown for value: UnKnown
            /// </summary>
            [EnumMember(Value = "UnKnown")]
            UnKnown = 1,
            
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 2,
            
            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 3,
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 4,
            
            /// <summary>
            /// Enum Closed for value: Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            Closed = 5
        }

        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EligibilityClassEnum
        {
            
            /// <summary>
            /// Enum Employee for value: Employee
            /// </summary>
            [EnumMember(Value = "Employee")]
            Employee = 1,
            
            /// <summary>
            /// Enum Family for value: Family
            /// </summary>
            [EnumMember(Value = "Family")]
            Family = 2,
            
            /// <summary>
            /// Enum Member for value: Member
            /// </summary>
            [EnumMember(Value = "Member")]
            Member = 3,
            
            /// <summary>
            /// Enum Retiree for value: Retiree
            /// </summary>
            [EnumMember(Value = "Retiree")]
            Retiree = 4,
            
            /// <summary>
            /// Enum Merger for value: Merger
            /// </summary>
            [EnumMember(Value = "Merger")]
            Merger = 5,
            
            /// <summary>
            /// Enum HealthSavingsAccount for value: HealthSavingsAccount
            /// </summary>
            [EnumMember(Value = "HealthSavingsAccount")]
            HealthSavingsAccount = 6,
            
            /// <summary>
            /// Enum Internal for value: Internal
            /// </summary>
            [EnumMember(Value = "Internal")]
            Internal = 7
        }

        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [DataMember(Name="eligibilityClass", EmitDefaultValue=false)]
        public EligibilityClassEnum? EligibilityClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSeg" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="name">name.</param>
        /// <param name="status">Allow valid Enum value..</param>
        /// <param name="keyword">keyword.</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="eligibilityClass">Allow valid Enum value..</param>
        public SearchSeg(string code = default(string), string name = default(string), StatusEnum? status = default(StatusEnum?), string keyword = default(string), Guid? groupId = default(Guid?), EligibilityClassEnum? eligibilityClass = default(EligibilityClassEnum?))
        {
            this.Code = code;
            this.Name = name;
            this.Status = status;
            this.Keyword = keyword;
            this.GroupId = groupId;
            this.EligibilityClass = eligibilityClass;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets Keyword
        /// </summary>
        [DataMember(Name="keyword", EmitDefaultValue=false)]
        public string Keyword { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public Guid? GroupId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchSeg {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  EligibilityClass: ").Append(EligibilityClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchSeg);
        }

        /// <summary>
        /// Returns true if SearchSeg instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchSeg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchSeg input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Keyword == input.Keyword ||
                    (this.Keyword != null &&
                    this.Keyword.Equals(input.Keyword))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.EligibilityClass == input.EligibilityClass ||
                    (this.EligibilityClass != null &&
                    this.EligibilityClass.Equals(input.EligibilityClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Keyword != null)
                    hashCode = hashCode * 59 + this.Keyword.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.EligibilityClass != null)
                    hashCode = hashCode * 59 + this.EligibilityClass.GetHashCode();
                return hashCode;
            }
        }
    }

}
