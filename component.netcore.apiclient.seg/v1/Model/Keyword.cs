/* 
 * Seg API
 *
 * Provide API for Manage Segs
 *
 * OpenAPI spec version: 1.0
 * Contact: vpatel@alliantcreditunion.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = component.netcore.apiclient.seg.Client.SwaggerDateConverter;

namespace component.netcore.apiclient.seg.v1.Model
{
    /// <summary>
    /// Keyword
    /// </summary>
    [DataContract]
    public partial class Keyword :  IEquatable<Keyword>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Keyword" /> class.
        /// </summary>
        /// <param name="segId">segId.</param>
        /// <param name="keywords">keywords.</param>
        public Keyword(Guid? segId = default(Guid?), List<string> keywords = default(List<string>))
        {
            this.SegId = segId;
            this.Keywords = keywords;
        }
        
        /// <summary>
        /// Gets or Sets SegId
        /// </summary>
        [DataMember(Name="segId", EmitDefaultValue=false)]
        public Guid? SegId { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="keywords", EmitDefaultValue=false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Keyword {\n");
            sb.Append("  SegId: ").Append(SegId).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Keyword);
        }

        /// <summary>
        /// Returns true if Keyword instances are equal
        /// </summary>
        /// <param name="input">Instance of Keyword to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Keyword input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SegId == input.SegId ||
                    (this.SegId != null &&
                    this.SegId.Equals(input.SegId))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SegId != null)
                    hashCode = hashCode * 59 + this.SegId.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                return hashCode;
            }
        }
    }

}
