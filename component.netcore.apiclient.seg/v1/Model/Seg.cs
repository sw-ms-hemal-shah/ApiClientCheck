/* 
 * Seg API
 *
 * Provide API for Manage Segs
 *
 * OpenAPI spec version: 1.0
 * Contact: vpatel@alliantcreditunion.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = component.netcore.apiclient.seg.Client.SwaggerDateConverter;

namespace component.netcore.apiclient.seg.v1.Model
{
    /// <summary>
    /// Seg
    /// </summary>
    [DataContract]
    public partial class Seg :  IEquatable<Seg>
    {
        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UnKnown for value: UnKnown
            /// </summary>
            [EnumMember(Value = "UnKnown")]
            UnKnown = 1,
            
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 2,
            
            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 3,
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 4,
            
            /// <summary>
            /// Enum Closed for value: Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            Closed = 5
        }

        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Employer for value: Employer
            /// </summary>
            [EnumMember(Value = "Employer")]
            Employer = 1,
            
            /// <summary>
            /// Enum Association for value: Association
            /// </summary>
            [EnumMember(Value = "Association")]
            Association = 2,
            
            /// <summary>
            /// Enum Community for value: Community
            /// </summary>
            [EnumMember(Value = "Community")]
            Community = 3
        }

        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EligibilityClassEnum
        {
            
            /// <summary>
            /// Enum Employee for value: Employee
            /// </summary>
            [EnumMember(Value = "Employee")]
            Employee = 1,
            
            /// <summary>
            /// Enum Family for value: Family
            /// </summary>
            [EnumMember(Value = "Family")]
            Family = 2,
            
            /// <summary>
            /// Enum Member for value: Member
            /// </summary>
            [EnumMember(Value = "Member")]
            Member = 3,
            
            /// <summary>
            /// Enum Retiree for value: Retiree
            /// </summary>
            [EnumMember(Value = "Retiree")]
            Retiree = 4,
            
            /// <summary>
            /// Enum Merger for value: Merger
            /// </summary>
            [EnumMember(Value = "Merger")]
            Merger = 5,
            
            /// <summary>
            /// Enum HealthSavingsAccount for value: HealthSavingsAccount
            /// </summary>
            [EnumMember(Value = "HealthSavingsAccount")]
            HealthSavingsAccount = 6,
            
            /// <summary>
            /// Enum Internal for value: Internal
            /// </summary>
            [EnumMember(Value = "Internal")]
            Internal = 7
        }

        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [DataMember(Name="eligibilityClass", EmitDefaultValue=false)]
        public EligibilityClassEnum EligibilityClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Seg" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Seg() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Seg" /> class.
        /// </summary>
        /// <param name="group">group.</param>
        /// <param name="code">Allow numeric only (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="publicDescription">publicDescription.</param>
        /// <param name="status">Allow valid Enum value..</param>
        /// <param name="type">Allow valid Enum value. (required).</param>
        /// <param name="eligibilityClass">Allow valid Enum value. (required).</param>
        /// <param name="cardType">cardType (required).</param>
        /// <param name="checkType">checkType (required).</param>
        /// <param name="byLawNumber">byLawNumber (required).</param>
        public Seg(SegGroup group = default(SegGroup), string code = default(string), string name = default(string), string description = default(string), string publicDescription = default(string), StatusEnum? status = default(StatusEnum?), TypeEnum type = default(TypeEnum), EligibilityClassEnum eligibilityClass = default(EligibilityClassEnum), CardType cardType = default(CardType), CheckType checkType = default(CheckType), string byLawNumber = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for Seg and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Seg and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Seg and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "eligibilityClass" is required (not null)
            if (eligibilityClass == null)
            {
                throw new InvalidDataException("eligibilityClass is a required property for Seg and cannot be null");
            }
            else
            {
                this.EligibilityClass = eligibilityClass;
            }
            // to ensure "cardType" is required (not null)
            if (cardType == null)
            {
                throw new InvalidDataException("cardType is a required property for Seg and cannot be null");
            }
            else
            {
                this.CardType = cardType;
            }
            // to ensure "checkType" is required (not null)
            if (checkType == null)
            {
                throw new InvalidDataException("checkType is a required property for Seg and cannot be null");
            }
            else
            {
                this.CheckType = checkType;
            }
            // to ensure "byLawNumber" is required (not null)
            if (byLawNumber == null)
            {
                throw new InvalidDataException("byLawNumber is a required property for Seg and cannot be null");
            }
            else
            {
                this.ByLawNumber = byLawNumber;
            }
            this.Group = group;
            this.Description = description;
            this.PublicDescription = publicDescription;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public SegGroup Group { get; set; }

        /// <summary>
        /// Allow numeric only
        /// </summary>
        /// <value>Allow numeric only</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PublicDescription
        /// </summary>
        [DataMember(Name="publicDescription", EmitDefaultValue=false)]
        public string PublicDescription { get; set; }




        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name="cardType", EmitDefaultValue=false)]
        public CardType CardType { get; set; }

        /// <summary>
        /// Gets or Sets CheckType
        /// </summary>
        [DataMember(Name="checkType", EmitDefaultValue=false)]
        public CheckType CheckType { get; set; }

        /// <summary>
        /// Gets or Sets ByLawNumber
        /// </summary>
        [DataMember(Name="byLawNumber", EmitDefaultValue=false)]
        public string ByLawNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Seg {\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PublicDescription: ").Append(PublicDescription).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EligibilityClass: ").Append(EligibilityClass).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CheckType: ").Append(CheckType).Append("\n");
            sb.Append("  ByLawNumber: ").Append(ByLawNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Seg);
        }

        /// <summary>
        /// Returns true if Seg instances are equal
        /// </summary>
        /// <param name="input">Instance of Seg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Seg input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PublicDescription == input.PublicDescription ||
                    (this.PublicDescription != null &&
                    this.PublicDescription.Equals(input.PublicDescription))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EligibilityClass == input.EligibilityClass ||
                    (this.EligibilityClass != null &&
                    this.EligibilityClass.Equals(input.EligibilityClass))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.CheckType == input.CheckType ||
                    (this.CheckType != null &&
                    this.CheckType.Equals(input.CheckType))
                ) && 
                (
                    this.ByLawNumber == input.ByLawNumber ||
                    (this.ByLawNumber != null &&
                    this.ByLawNumber.Equals(input.ByLawNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PublicDescription != null)
                    hashCode = hashCode * 59 + this.PublicDescription.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EligibilityClass != null)
                    hashCode = hashCode * 59 + this.EligibilityClass.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.CheckType != null)
                    hashCode = hashCode * 59 + this.CheckType.GetHashCode();
                if (this.ByLawNumber != null)
                    hashCode = hashCode * 59 + this.ByLawNumber.GetHashCode();
                return hashCode;
            }
        }
    }

}
