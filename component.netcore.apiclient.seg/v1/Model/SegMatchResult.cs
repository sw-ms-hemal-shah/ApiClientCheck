/* 
 * Seg API
 *
 * Provide API for Manage Segs
 *
 * OpenAPI spec version: 1.0
 * Contact: vpatel@alliantcreditunion.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = component.netcore.apiclient.seg.Client.SwaggerDateConverter;

namespace component.netcore.apiclient.seg.v1.Model
{
    /// <summary>
    /// SegMatchResult
    /// </summary>
    [DataContract]
    public partial class SegMatchResult :  IEquatable<SegMatchResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SegMatchResult" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="seg">seg.</param>
        public SegMatchResult(Guid? id = default(Guid?), SegResult seg = default(SegResult))
        {
            this.Id = id;
            this.Seg = seg;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Seg
        /// </summary>
        [DataMember(Name="seg", EmitDefaultValue=false)]
        public SegResult Seg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SegMatchResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Seg: ").Append(Seg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegMatchResult);
        }

        /// <summary>
        /// Returns true if SegMatchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of SegMatchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegMatchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Seg == input.Seg ||
                    (this.Seg != null &&
                    this.Seg.Equals(input.Seg))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Seg != null)
                    hashCode = hashCode * 59 + this.Seg.GetHashCode();
                return hashCode;
            }
        }
    }

}
