/* 
 * Seg API
 *
 * Provide API for Manage Segs
 *
 * OpenAPI spec version: 1.0
 * Contact: vpatel@alliantcreditunion.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using SegApiClient.Client;
using SegApiClient.Model;

namespace SegApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeywordApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Keyword
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <param name="keyword"></param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegKeywordDelete (Guid? segId, string keyword);

        /// <summary>
        /// Delete Keyword
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <param name="keyword"></param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ApiResponse<ResponseInfo> SegKeywordDeleteWithHttpInfo (Guid? segId, string keyword);
        /// <summary>
        /// This method will add keyword
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegsKeywordAdd (AddKeyword keyword = null);

        /// <summary>
        /// This method will add keyword
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ApiResponse<ResponseInfo> SegsKeywordAddWithHttpInfo (AddKeyword keyword = null);
        /// <summary>
        /// This will return list of keyword by seg key
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <returns>List&lt;Keyword&gt;</returns>
        List<Keyword> SegsKeywordList (Guid? segId);

        /// <summary>
        /// This will return list of keyword by seg key
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <returns>ApiResponse of List&lt;Keyword&gt;</returns>
        ApiResponse<List<Keyword>> SegsKeywordListWithHttpInfo (Guid? segId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Keyword
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <param name="keyword"></param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegKeywordDeleteAsync (Guid? segId, string keyword);

        /// <summary>
        /// Delete Keyword
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <param name="keyword"></param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegKeywordDeleteAsyncWithHttpInfo (Guid? segId, string keyword);
        /// <summary>
        /// This method will add keyword
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsKeywordAddAsync (AddKeyword keyword = null);

        /// <summary>
        /// This method will add keyword
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsKeywordAddAsyncWithHttpInfo (AddKeyword keyword = null);
        /// <summary>
        /// This will return list of keyword by seg key
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <returns>Task of List&lt;Keyword&gt;</returns>
        System.Threading.Tasks.Task<List<Keyword>> SegsKeywordListAsync (Guid? segId);

        /// <summary>
        /// This will return list of keyword by seg key
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <returns>Task of ApiResponse (List&lt;Keyword&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Keyword>>> SegsKeywordListAsyncWithHttpInfo (Guid? segId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeywordApi : IKeywordApi
    {
        private SegApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeywordApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeywordApi(String basePath)
        {
            this.Configuration = new SegApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SegApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeywordApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeywordApi(SegApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SegApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SegApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SegApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SegApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Keyword &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <param name="keyword"></param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegKeywordDelete (Guid? segId, string keyword)
        {
             ApiResponse<ResponseInfo> localVarResponse = SegKeywordDeleteWithHttpInfo(segId, keyword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Keyword &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <param name="keyword"></param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ApiResponse< ResponseInfo > SegKeywordDeleteWithHttpInfo (Guid? segId, string keyword)
        {
            // verify the required parameter 'segId' is set
            if (segId == null)
                throw new ApiException(400, "Missing required parameter 'segId' when calling KeywordApi->SegKeywordDelete");
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new ApiException(400, "Missing required parameter 'keyword' when calling KeywordApi->SegKeywordDelete");

            var localVarPath = "./api/v1/segs/{segId}/keywords/{keyword}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (segId != null) localVarPathParams.Add("segId", this.Configuration.ApiClient.ParameterToString(segId)); // path parameter
            if (keyword != null) localVarPathParams.Add("keyword", this.Configuration.ApiClient.ParameterToString(keyword)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegKeywordDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Delete Keyword &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <param name="keyword"></param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegKeywordDeleteAsync (Guid? segId, string keyword)
        {
             ApiResponse<ResponseInfo> localVarResponse = await SegKeywordDeleteAsyncWithHttpInfo(segId, keyword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Keyword &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <param name="keyword"></param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegKeywordDeleteAsyncWithHttpInfo (Guid? segId, string keyword)
        {
            // verify the required parameter 'segId' is set
            if (segId == null)
                throw new ApiException(400, "Missing required parameter 'segId' when calling KeywordApi->SegKeywordDelete");
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new ApiException(400, "Missing required parameter 'keyword' when calling KeywordApi->SegKeywordDelete");

            var localVarPath = "./api/v1/segs/{segId}/keywords/{keyword}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (segId != null) localVarPathParams.Add("segId", this.Configuration.ApiClient.ParameterToString(segId)); // path parameter
            if (keyword != null) localVarPathParams.Add("keyword", this.Configuration.ApiClient.ParameterToString(keyword)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegKeywordDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// This method will add keyword &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegsKeywordAdd (AddKeyword keyword = null)
        {
             ApiResponse<ResponseInfo> localVarResponse = SegsKeywordAddWithHttpInfo(keyword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method will add keyword &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ApiResponse< ResponseInfo > SegsKeywordAddWithHttpInfo (AddKeyword keyword = null)
        {

            var localVarPath = "./api/v1/segs/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyword != null && keyword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(keyword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = keyword; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsKeywordAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// This method will add keyword &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsKeywordAddAsync (AddKeyword keyword = null)
        {
             ApiResponse<ResponseInfo> localVarResponse = await SegsKeywordAddAsyncWithHttpInfo(keyword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method will add keyword &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsKeywordAddAsyncWithHttpInfo (AddKeyword keyword = null)
        {

            var localVarPath = "./api/v1/segs/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyword != null && keyword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(keyword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = keyword; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsKeywordAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// This will return list of keyword by seg key &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <returns>List&lt;Keyword&gt;</returns>
        public List<Keyword> SegsKeywordList (Guid? segId)
        {
             ApiResponse<List<Keyword>> localVarResponse = SegsKeywordListWithHttpInfo(segId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This will return list of keyword by seg key &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <returns>ApiResponse of List&lt;Keyword&gt;</returns>
        public ApiResponse< List<Keyword> > SegsKeywordListWithHttpInfo (Guid? segId)
        {
            // verify the required parameter 'segId' is set
            if (segId == null)
                throw new ApiException(400, "Missing required parameter 'segId' when calling KeywordApi->SegsKeywordList");

            var localVarPath = "./api/v1/segs/{segId}/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (segId != null) localVarPathParams.Add("segId", this.Configuration.ApiClient.ParameterToString(segId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsKeywordList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Keyword>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Keyword>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Keyword>)));
        }

        /// <summary>
        /// This will return list of keyword by seg key &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <returns>Task of List&lt;Keyword&gt;</returns>
        public async System.Threading.Tasks.Task<List<Keyword>> SegsKeywordListAsync (Guid? segId)
        {
             ApiResponse<List<Keyword>> localVarResponse = await SegsKeywordListAsyncWithHttpInfo(segId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This will return list of keyword by seg key &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segId"></param>
        /// <returns>Task of ApiResponse (List&lt;Keyword&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Keyword>>> SegsKeywordListAsyncWithHttpInfo (Guid? segId)
        {
            // verify the required parameter 'segId' is set
            if (segId == null)
                throw new ApiException(400, "Missing required parameter 'segId' when calling KeywordApi->SegsKeywordList");

            var localVarPath = "./api/v1/segs/{segId}/keywords";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (segId != null) localVarPathParams.Add("segId", this.Configuration.ApiClient.ParameterToString(segId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsKeywordList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Keyword>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Keyword>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Keyword>)));
        }

    }
}
