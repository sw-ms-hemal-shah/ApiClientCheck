/* 
 * Seg API
 *
 * Provide API for Manage Segs
 *
 * OpenAPI spec version: 1.0
 * Contact: vpatel@alliantcreditunion.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using component.netcore.api.refit.info;
using component.netcore.api.refit.interfaces;
using RestSharp.Portable;
using SegApiClient.Client;
using SegApiClient.Model;

namespace SegApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add seg group.
        /// </summary>
        /// <remarks>
        /// To add seg group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group - object that needs to be added (optional)</param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegsGroupAdd(Group group = null);

        /// <summary>
        /// Add seg group.
        /// </summary>
        /// <remarks>
        /// To add seg group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group - object that needs to be added (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ResponseInfo SegsGroupAddWithHttpInfo(Group group = null);
        /// <summary>
        /// To delete seg group.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegsGroupDelete(Guid? id);

        /// <summary>
        /// To delete seg group.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ResponseInfo SegsGroupDeleteWithHttpInfo(Guid? id);
        /// <summary>
        /// Get seg group by group id.
        /// </summary>
        /// <remarks>
        /// To get seg group by group id.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg group id for which wants group.</param>
        /// <returns>RetrieveGroup</returns>
        RetrieveGroup SegsGroupGet(Guid? id);

        /// <summary>
        /// Get seg group by group id.
        /// </summary>
        /// <remarks>
        /// To get seg group by group id.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg group id for which wants group.</param>
        /// <returns>ApiResponse of RetrieveGroup</returns>
        RetrieveGroup SegsGroupGetWithHttpInfo(Guid? id);
        /// <summary>
        /// Get list of seg groups.
        /// </summary>
        /// <remarks>
        /// To get list of seg groups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RetrieveGroup&gt;</returns>
        List<RetrieveGroup> SegsGroupList();

        /// <summary>
        /// Get list of seg groups.
        /// </summary>
        /// <remarks>
        /// To get list of seg groups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RetrieveGroup&gt;</returns>
        List<RetrieveGroup> SegsGroupListWithHttpInfo();
        /// <summary>
        /// To update seg group.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id.</param>
        /// <param name="group">group - object that needs to be updated (optional)</param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegsGroupUpdate(Guid? id, Group group = null);

        /// <summary>
        /// To update seg group.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id.</param>
        /// <param name="group">group - object that needs to be updated (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ResponseInfo SegsGroupUpdateWithHttpInfo(Guid? id, Group group = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add seg group.
        /// </summary>
        /// <remarks>
        /// To add seg group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group - object that needs to be added (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsGroupAddAsync(Group group = null);

        /// <summary>
        /// Add seg group.
        /// </summary>
        /// <remarks>
        /// To add seg group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group - object that needs to be added (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsGroupAddAsyncWithHttpInfo(Group group = null);
        /// <summary>
        /// To delete seg group.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsGroupDeleteAsync(Guid? id);

        /// <summary>
        /// To delete seg group.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsGroupDeleteAsyncWithHttpInfo(Guid? id);
        /// <summary>
        /// Get seg group by group id.
        /// </summary>
        /// <remarks>
        /// To get seg group by group id.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg group id for which wants group.</param>
        /// <returns>Task of RetrieveGroup</returns>
        System.Threading.Tasks.Task<RetrieveGroup> SegsGroupGetAsync(Guid? id);

        /// <summary>
        /// Get seg group by group id.
        /// </summary>
        /// <remarks>
        /// To get seg group by group id.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg group id for which wants group.</param>
        /// <returns>Task of ApiResponse (RetrieveGroup)</returns>
        System.Threading.Tasks.Task<RetrieveGroup> SegsGroupGetAsyncWithHttpInfo(Guid? id);
        /// <summary>
        /// Get list of seg groups.
        /// </summary>
        /// <remarks>
        /// To get list of seg groups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RetrieveGroup&gt;</returns>
        System.Threading.Tasks.Task<List<RetrieveGroup>> SegsGroupListAsync();

        /// <summary>
        /// Get list of seg groups.
        /// </summary>
        /// <remarks>
        /// To get list of seg groups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RetrieveGroup&gt;)</returns>
        System.Threading.Tasks.Task<List<RetrieveGroup>> SegsGroupListAsyncWithHttpInfo();
        /// <summary>
        /// To update seg group.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id.</param>
        /// <param name="group">group - object that needs to be updated (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsGroupUpdateAsync(Guid? id, Group group = null);

        /// <summary>
        /// To update seg group.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id.</param>
        /// <param name="group">group - object that needs to be updated (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsGroupUpdateAsyncWithHttpInfo(Guid? id, Group group = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupApi : IGroupApi
    {
        private readonly IApiCaller _refitWrapper;

        private SegApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        //public GroupApi(String basePath, IApiCaller refitWrapper)
        public GroupApi(IApiCaller refitWrapper)
        {
            //this.Configuration = new SegApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SegApiClient.Client.Configuration.DefaultExceptionFactory;

            _refitWrapper = refitWrapper;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupApi(SegApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SegApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SegApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SegApiClient.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SegApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add seg group. To add seg group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group - object that needs to be added (optional)</param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegsGroupAdd(Group group = null)
        {
            ResponseInfo localVarResponse = SegsGroupAddWithHttpInfo(group);
            return localVarResponse;
        }

        /// <summary>
        /// Add seg group. To add seg group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group - object that needs to be added (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ResponseInfo SegsGroupAddWithHttpInfo(Group group = null)
        {

            var localVarPath = "/api/v1/segs/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null && group.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(group); // http body (model) parameter
            }
            else
            {
                localVarPostBody = group; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath,
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Post,
                QueryParamValues = group
            };
            return _refitWrapper.CallApi<ResponseInfo, Group>(apiCallInfo).Result;

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
            //    Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupAdd", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<ResponseInfo>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Add seg group. To add seg group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group - object that needs to be added (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsGroupAddAsync(Group group = null)
        {
            ResponseInfo localVarResponse = await SegsGroupAddAsyncWithHttpInfo(group);
            return localVarResponse;

        }

        /// <summary>
        /// Add seg group. To add seg group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">group - object that needs to be added (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsGroupAddAsyncWithHttpInfo(Group group = null)
        {

            var localVarPath = "/api/v1/segs/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null && group.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(group); // http body (model) parameter
            }
            else
            {
                localVarPostBody = group; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath,
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Get
            };
            return await _refitWrapper.CallApi<ResponseInfo>(apiCallInfo);

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
            //    Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupAdd", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<ResponseInfo>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// To delete seg group. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegsGroupDelete(Guid? id)
        {
            ResponseInfo localVarResponse = SegsGroupDeleteWithHttpInfo(id);
            return localVarResponse;
        }

        /// <summary>
        /// To delete seg group. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ResponseInfo SegsGroupDeleteWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupApi->SegsGroupDelete");

            var localVarPath = "/api/v1/segs/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath.Replace("{id}", id.Value.ToString()),
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Delete
            };
            return _refitWrapper.CallApi<ResponseInfo>(apiCallInfo).Result;

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
            //    Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupDelete", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<ResponseInfo>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// To delete seg group. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsGroupDeleteAsync(Guid? id)
        {
            ResponseInfo localVarResponse = await SegsGroupDeleteAsyncWithHttpInfo(id);
            return localVarResponse;

        }

        /// <summary>
        /// To delete seg group. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsGroupDeleteAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupApi->SegsGroupDelete");

            var localVarPath = "/api/v1/segs/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath,
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Get
            };
            return await _refitWrapper.CallApi<ResponseInfo>(apiCallInfo);

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
            //    Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupDelete", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<ResponseInfo>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Get seg group by group id. To get seg group by group id.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg group id for which wants group.</param>
        /// <returns>RetrieveGroup</returns>
        public RetrieveGroup SegsGroupGet(Guid? id)
        {
            RetrieveGroup localVarResponse = SegsGroupGetWithHttpInfo(id);
            return localVarResponse;
        }

        /// <summary>
        /// Get seg group by group id. To get seg group by group id.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg group id for which wants group.</param>
        /// <returns>ApiResponse of RetrieveGroup</returns>
        public RetrieveGroup SegsGroupGetWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupApi->SegsGroupGet");

            var localVarPath = "/api/v1/segs/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath.Replace("{id}", id.Value.ToString()),
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Get,                

            };
            return _refitWrapper.CallApi<RetrieveGroup>(apiCallInfo).Result;

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
            //    Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupGet", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<RetrieveGroup>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (RetrieveGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveGroup)));
        }

        /// <summary>
        /// Get seg group by group id. To get seg group by group id.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg group id for which wants group.</param>
        /// <returns>Task of RetrieveGroup</returns>
        public async System.Threading.Tasks.Task<RetrieveGroup> SegsGroupGetAsync(Guid? id)
        {
            RetrieveGroup localVarResponse = await SegsGroupGetAsyncWithHttpInfo(id);
            return localVarResponse;

        }

        /// <summary>
        /// Get seg group by group id. To get seg group by group id.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg group id for which wants group.</param>
        /// <returns>Task of ApiResponse (RetrieveGroup)</returns>
        public async System.Threading.Tasks.Task<RetrieveGroup> SegsGroupGetAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupApi->SegsGroupGet");

            var localVarPath = "/api/v1/segs/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath,
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Get
            };
            return await _refitWrapper.CallApi<RetrieveGroup>(apiCallInfo);

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
            //    Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupGet", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<RetrieveGroup>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (RetrieveGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveGroup)));
        }

        /// <summary>
        /// Get list of seg groups. To get list of seg groups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RetrieveGroup&gt;</returns>
        public List<RetrieveGroup> SegsGroupList()
        {
            List<RetrieveGroup> localVarResponse = SegsGroupListWithHttpInfo();
            return localVarResponse;
        }

        /// <summary>
        /// Get list of seg groups. To get list of seg groups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RetrieveGroup&gt;</returns>
        public List<RetrieveGroup> SegsGroupListWithHttpInfo()
        {

            var localVarPath = "/api/v1/segs/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath,
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Get
            };
            return _refitWrapper.CallApi<List<RetrieveGroup>>(apiCallInfo).Result;

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
            //    Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupList", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<List<RetrieveGroup>>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (List<RetrieveGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RetrieveGroup>)));
        }

        /// <summary>
        /// Get list of seg groups. To get list of seg groups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RetrieveGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<RetrieveGroup>> SegsGroupListAsync()
        {
            List<RetrieveGroup> localVarResponse = await SegsGroupListAsyncWithHttpInfo();
            return localVarResponse;

        }

        /// <summary>
        /// Get list of seg groups. To get list of seg groups.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RetrieveGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<List<RetrieveGroup>> SegsGroupListAsyncWithHttpInfo()
        {

            var localVarPath = "/api/v1/segs/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath,
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Get
            };
            return await _refitWrapper.CallApi<List<RetrieveGroup>>(apiCallInfo);

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
            //    Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupList", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<List<RetrieveGroup>>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (List<RetrieveGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RetrieveGroup>)));
        }

        /// <summary>
        /// To update seg group. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id.</param>
        /// <param name="group">group - object that needs to be updated (optional)</param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegsGroupUpdate(Guid? id, Group group = null)
        {
            ResponseInfo localVarResponse = SegsGroupUpdateWithHttpInfo(id, group);
            return localVarResponse;
        }

        /// <summary>
        /// To update seg group. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id.</param>
        /// <param name="group">group - object that needs to be updated (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ResponseInfo SegsGroupUpdateWithHttpInfo(Guid? id, Group group = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupApi->SegsGroupUpdate");

            var localVarPath = "/api/v1/segs/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (group != null && group.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(group); // http body (model) parameter
            }
            else
            {
                localVarPostBody = group; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath.Replace("{id}", id.Value.ToString()),
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Put,
                QueryParamValues = group
            };
            return _refitWrapper.CallApi<ResponseInfo, Group>(apiCallInfo).Result;

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
            //    Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupUpdate", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<ResponseInfo>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// To update seg group. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id.</param>
        /// <param name="group">group - object that needs to be updated (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsGroupUpdateAsync(Guid? id, Group group = null)
        {
            ResponseInfo localVarResponse = await SegsGroupUpdateAsyncWithHttpInfo(id, group);
            return localVarResponse;

        }

        /// <summary>
        /// To update seg group. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id.</param>
        /// <param name="group">group - object that needs to be updated (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsGroupUpdateAsyncWithHttpInfo(Guid? id, Group group = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GroupApi->SegsGroupUpdate");

            var localVarPath = "/api/v1/segs/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (group != null && group.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(group); // http body (model) parameter
            }
            else
            {
                localVarPostBody = group; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            Dictionary<string, string> dictionaryToken = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
                dictionaryToken.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //make Refit HTTP request
            var apiCallInfo = new ApiCallInfo()
            {
                HeaderValues = dictionaryToken,
                Url = Configuration.BasePath + localVarPath,
                HttpMethod = Microsoft.AspNetCore.Http.HttpMethods.Get
            };
            return await _refitWrapper.CallApi<ResponseInfo>(apiCallInfo);

            // make the HTTP request
            //IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
            //    Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            //    localVarPathParams, localVarHttpContentType);

            //int localVarStatusCode = (int) localVarResponse.StatusCode;

            //if (ExceptionFactory != null)
            //{
            //    Exception exception = ExceptionFactory("SegsGroupUpdate", localVarResponse);
            //    if (exception != null) throw exception;
            //}

            //return new ApiResponse<ResponseInfo>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
            //    (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

    }
}
