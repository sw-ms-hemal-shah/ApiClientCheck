/* 
 * Seg API
 *
 * Provide API for Manage Segs
 *
 * OpenAPI spec version: 1.0
 * Contact: vpatel@alliantcreditunion.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using SegApiClient.Client;
using SegApiClient.Model;

namespace SegApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add seg detail.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seg">Seg - object that needs to be added (optional)</param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegsSegAdd (Seg seg = null);

        /// <summary>
        /// Add seg detail.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seg">Seg - object that needs to be added (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ApiResponse<ResponseInfo> SegsSegAddWithHttpInfo (Seg seg = null);
        /// <summary>
        /// Get seg detail by seg code.
        /// </summary>
        /// <remarks>
        /// To get seg detail by seg code.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Seg code for which wants seg.</param>
        /// <returns>RetrieveSeg</returns>
        RetrieveSeg SegsSegCode (string code);

        /// <summary>
        /// Get seg detail by seg code.
        /// </summary>
        /// <remarks>
        /// To get seg detail by seg code.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Seg code for which wants seg.</param>
        /// <returns>ApiResponse of RetrieveSeg</returns>
        ApiResponse<RetrieveSeg> SegsSegCodeWithHttpInfo (string code);
        /// <summary>
        /// Delete segs.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegsSegDelete (Guid? id);

        /// <summary>
        /// Delete segs.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ApiResponse<ResponseInfo> SegsSegDeleteWithHttpInfo (Guid? id);
        /// <summary>
        /// Get seg detail by seg key.
        /// </summary>
        /// <remarks>
        /// To get seg detail by seg key.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg key for which wants seg.</param>
        /// <returns>RetrieveSeg</returns>
        RetrieveSeg SegsSegId (Guid? id);

        /// <summary>
        /// Get seg detail by seg key.
        /// </summary>
        /// <remarks>
        /// To get seg detail by seg key.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg key for which wants seg.</param>
        /// <returns>ApiResponse of RetrieveSeg</returns>
        ApiResponse<RetrieveSeg> SegsSegIdWithHttpInfo (Guid? id);
        /// <summary>
        /// Get list of segs.
        /// </summary>
        /// <remarks>
        /// To get list of segs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RetrieveSeg&gt;</returns>
        List<RetrieveSeg> SegsSegList ();

        /// <summary>
        /// Get list of segs.
        /// </summary>
        /// <remarks>
        /// To get list of segs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RetrieveSeg&gt;</returns>
        ApiResponse<List<RetrieveSeg>> SegsSegListWithHttpInfo ();
        /// <summary>
        /// Get segs base on search criteria.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSeg">Search detail which wants seg. (optional)</param>
        /// <returns>List&lt;RetrieveSeg&gt;</returns>
        List<RetrieveSeg> SegsSegSearch (SearchSeg searchSeg = null);

        /// <summary>
        /// Get segs base on search criteria.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSeg">Search detail which wants seg. (optional)</param>
        /// <returns>ApiResponse of List&lt;RetrieveSeg&gt;</returns>
        ApiResponse<List<RetrieveSeg>> SegsSegSearchWithHttpInfo (SearchSeg searchSeg = null);
        /// <summary>
        /// Get segs match based on search criteria
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reader
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segMatch">Seg match (optional)</param>
        /// <param name="retrieveDefault">if retrieveDefault - true then &#39;Foster Care to Success&#39; seg data will be returned (optional, default to true)</param>
        /// <returns>List&lt;SegMatchResult&gt;</returns>
        List<SegMatchResult> SegsSegSegmatch (SegMatch segMatch = null, bool? retrieveDefault = null);

        /// <summary>
        /// Get segs match based on search criteria
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reader
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segMatch">Seg match (optional)</param>
        /// <param name="retrieveDefault">if retrieveDefault - true then &#39;Foster Care to Success&#39; seg data will be returned (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;SegMatchResult&gt;</returns>
        ApiResponse<List<SegMatchResult>> SegsSegSegmatchWithHttpInfo (SegMatch segMatch = null, bool? retrieveDefault = null);
        /// <summary>
        /// Update segs status.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateStatus">Segs - object that needs to be updated (optional)</param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegsSegStatus (Guid? id, SegStatus updateStatus = null);

        /// <summary>
        /// Update segs status.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateStatus">Segs - object that needs to be updated (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ApiResponse<ResponseInfo> SegsSegStatusWithHttpInfo (Guid? id, SegStatus updateStatus = null);
        /// <summary>
        /// Update seg.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateSeg">seg - object that needs to be updated (optional)</param>
        /// <returns>ResponseInfo</returns>
        ResponseInfo SegsSegUpdate (Guid? id, Seg updateSeg = null);

        /// <summary>
        /// Update seg.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateSeg">seg - object that needs to be updated (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        ApiResponse<ResponseInfo> SegsSegUpdateWithHttpInfo (Guid? id, Seg updateSeg = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add seg detail.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seg">Seg - object that needs to be added (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsSegAddAsync (Seg seg = null);

        /// <summary>
        /// Add seg detail.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seg">Seg - object that needs to be added (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsSegAddAsyncWithHttpInfo (Seg seg = null);
        /// <summary>
        /// Get seg detail by seg code.
        /// </summary>
        /// <remarks>
        /// To get seg detail by seg code.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Seg code for which wants seg.</param>
        /// <returns>Task of RetrieveSeg</returns>
        System.Threading.Tasks.Task<RetrieveSeg> SegsSegCodeAsync (string code);

        /// <summary>
        /// Get seg detail by seg code.
        /// </summary>
        /// <remarks>
        /// To get seg detail by seg code.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Seg code for which wants seg.</param>
        /// <returns>Task of ApiResponse (RetrieveSeg)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveSeg>> SegsSegCodeAsyncWithHttpInfo (string code);
        /// <summary>
        /// Delete segs.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsSegDeleteAsync (Guid? id);

        /// <summary>
        /// Delete segs.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsSegDeleteAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Get seg detail by seg key.
        /// </summary>
        /// <remarks>
        /// To get seg detail by seg key.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg key for which wants seg.</param>
        /// <returns>Task of RetrieveSeg</returns>
        System.Threading.Tasks.Task<RetrieveSeg> SegsSegIdAsync (Guid? id);

        /// <summary>
        /// Get seg detail by seg key.
        /// </summary>
        /// <remarks>
        /// To get seg detail by seg key.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg key for which wants seg.</param>
        /// <returns>Task of ApiResponse (RetrieveSeg)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveSeg>> SegsSegIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Get list of segs.
        /// </summary>
        /// <remarks>
        /// To get list of segs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RetrieveSeg&gt;</returns>
        System.Threading.Tasks.Task<List<RetrieveSeg>> SegsSegListAsync ();

        /// <summary>
        /// Get list of segs.
        /// </summary>
        /// <remarks>
        /// To get list of segs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RetrieveSeg&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RetrieveSeg>>> SegsSegListAsyncWithHttpInfo ();
        /// <summary>
        /// Get segs base on search criteria.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSeg">Search detail which wants seg. (optional)</param>
        /// <returns>Task of List&lt;RetrieveSeg&gt;</returns>
        System.Threading.Tasks.Task<List<RetrieveSeg>> SegsSegSearchAsync (SearchSeg searchSeg = null);

        /// <summary>
        /// Get segs base on search criteria.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSeg">Search detail which wants seg. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RetrieveSeg&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RetrieveSeg>>> SegsSegSearchAsyncWithHttpInfo (SearchSeg searchSeg = null);
        /// <summary>
        /// Get segs match based on search criteria
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reader
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segMatch">Seg match (optional)</param>
        /// <param name="retrieveDefault">if retrieveDefault - true then &#39;Foster Care to Success&#39; seg data will be returned (optional, default to true)</param>
        /// <returns>Task of List&lt;SegMatchResult&gt;</returns>
        System.Threading.Tasks.Task<List<SegMatchResult>> SegsSegSegmatchAsync (SegMatch segMatch = null, bool? retrieveDefault = null);

        /// <summary>
        /// Get segs match based on search criteria
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reader
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segMatch">Seg match (optional)</param>
        /// <param name="retrieveDefault">if retrieveDefault - true then &#39;Foster Care to Success&#39; seg data will be returned (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;SegMatchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SegMatchResult>>> SegsSegSegmatchAsyncWithHttpInfo (SegMatch segMatch = null, bool? retrieveDefault = null);
        /// <summary>
        /// Update segs status.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateStatus">Segs - object that needs to be updated (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsSegStatusAsync (Guid? id, SegStatus updateStatus = null);

        /// <summary>
        /// Update segs status.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateStatus">Segs - object that needs to be updated (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsSegStatusAsyncWithHttpInfo (Guid? id, SegStatus updateStatus = null);
        /// <summary>
        /// Update seg.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateSeg">seg - object that needs to be updated (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        System.Threading.Tasks.Task<ResponseInfo> SegsSegUpdateAsync (Guid? id, Seg updateSeg = null);

        /// <summary>
        /// Update seg.
        /// </summary>
        /// <remarks>
        /// &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </remarks>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateSeg">seg - object that needs to be updated (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsSegUpdateAsyncWithHttpInfo (Guid? id, Seg updateSeg = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SegApi : ISegApi
    {
        private SegApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SegApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SegApi(String basePath)
        {
            this.Configuration = new SegApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SegApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SegApi(SegApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SegApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SegApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SegApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SegApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add seg detail. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seg">Seg - object that needs to be added (optional)</param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegsSegAdd (Seg seg = null)
        {
             ApiResponse<ResponseInfo> localVarResponse = SegsSegAddWithHttpInfo(seg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add seg detail. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seg">Seg - object that needs to be added (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ApiResponse< ResponseInfo > SegsSegAddWithHttpInfo (Seg seg = null)
        {

            var localVarPath = "./api/v1/segs/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seg != null && seg.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(seg); // http body (model) parameter
            }
            else
            {
                localVarPostBody = seg; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Add seg detail. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seg">Seg - object that needs to be added (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsSegAddAsync (Seg seg = null)
        {
             ApiResponse<ResponseInfo> localVarResponse = await SegsSegAddAsyncWithHttpInfo(seg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add seg detail. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seg">Seg - object that needs to be added (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsSegAddAsyncWithHttpInfo (Seg seg = null)
        {

            var localVarPath = "./api/v1/segs/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seg != null && seg.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(seg); // http body (model) parameter
            }
            else
            {
                localVarPostBody = seg; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Get seg detail by seg code. To get seg detail by seg code.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Seg code for which wants seg.</param>
        /// <returns>RetrieveSeg</returns>
        public RetrieveSeg SegsSegCode (string code)
        {
             ApiResponse<RetrieveSeg> localVarResponse = SegsSegCodeWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get seg detail by seg code. To get seg detail by seg code.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Seg code for which wants seg.</param>
        /// <returns>ApiResponse of RetrieveSeg</returns>
        public ApiResponse< RetrieveSeg > SegsSegCodeWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling SegApi->SegsSegCode");

            var localVarPath = "./api/v1/segs/codes/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveSeg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RetrieveSeg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveSeg)));
        }

        /// <summary>
        /// Get seg detail by seg code. To get seg detail by seg code.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Seg code for which wants seg.</param>
        /// <returns>Task of RetrieveSeg</returns>
        public async System.Threading.Tasks.Task<RetrieveSeg> SegsSegCodeAsync (string code)
        {
             ApiResponse<RetrieveSeg> localVarResponse = await SegsSegCodeAsyncWithHttpInfo(code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get seg detail by seg code. To get seg detail by seg code.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Seg code for which wants seg.</param>
        /// <returns>Task of ApiResponse (RetrieveSeg)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveSeg>> SegsSegCodeAsyncWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling SegApi->SegsSegCode");

            var localVarPath = "./api/v1/segs/codes/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveSeg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RetrieveSeg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveSeg)));
        }

        /// <summary>
        /// Delete segs. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegsSegDelete (Guid? id)
        {
             ApiResponse<ResponseInfo> localVarResponse = SegsSegDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete segs. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ApiResponse< ResponseInfo > SegsSegDeleteWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegApi->SegsSegDelete");

            var localVarPath = "./api/v1/segs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Delete segs. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsSegDeleteAsync (Guid? id)
        {
             ApiResponse<ResponseInfo> localVarResponse = await SegsSegDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete segs. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsSegDeleteAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegApi->SegsSegDelete");

            var localVarPath = "./api/v1/segs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Get seg detail by seg key. To get seg detail by seg key.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg key for which wants seg.</param>
        /// <returns>RetrieveSeg</returns>
        public RetrieveSeg SegsSegId (Guid? id)
        {
             ApiResponse<RetrieveSeg> localVarResponse = SegsSegIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get seg detail by seg key. To get seg detail by seg key.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg key for which wants seg.</param>
        /// <returns>ApiResponse of RetrieveSeg</returns>
        public ApiResponse< RetrieveSeg > SegsSegIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegApi->SegsSegId");

            var localVarPath = "./api/v1/segs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveSeg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RetrieveSeg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveSeg)));
        }

        /// <summary>
        /// Get seg detail by seg key. To get seg detail by seg key.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg key for which wants seg.</param>
        /// <returns>Task of RetrieveSeg</returns>
        public async System.Threading.Tasks.Task<RetrieveSeg> SegsSegIdAsync (Guid? id)
        {
             ApiResponse<RetrieveSeg> localVarResponse = await SegsSegIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get seg detail by seg key. To get seg detail by seg key.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Seg key for which wants seg.</param>
        /// <returns>Task of ApiResponse (RetrieveSeg)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveSeg>> SegsSegIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegApi->SegsSegId");

            var localVarPath = "./api/v1/segs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveSeg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RetrieveSeg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveSeg)));
        }

        /// <summary>
        /// Get list of segs. To get list of segs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RetrieveSeg&gt;</returns>
        public List<RetrieveSeg> SegsSegList ()
        {
             ApiResponse<List<RetrieveSeg>> localVarResponse = SegsSegListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of segs. To get list of segs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RetrieveSeg&gt;</returns>
        public ApiResponse< List<RetrieveSeg> > SegsSegListWithHttpInfo ()
        {

            var localVarPath = "./api/v1/segs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RetrieveSeg>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<RetrieveSeg>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RetrieveSeg>)));
        }

        /// <summary>
        /// Get list of segs. To get list of segs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RetrieveSeg&gt;</returns>
        public async System.Threading.Tasks.Task<List<RetrieveSeg>> SegsSegListAsync ()
        {
             ApiResponse<List<RetrieveSeg>> localVarResponse = await SegsSegListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of segs. To get list of segs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RetrieveSeg&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RetrieveSeg>>> SegsSegListAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/segs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RetrieveSeg>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<RetrieveSeg>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RetrieveSeg>)));
        }

        /// <summary>
        /// Get segs base on search criteria. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSeg">Search detail which wants seg. (optional)</param>
        /// <returns>List&lt;RetrieveSeg&gt;</returns>
        public List<RetrieveSeg> SegsSegSearch (SearchSeg searchSeg = null)
        {
             ApiResponse<List<RetrieveSeg>> localVarResponse = SegsSegSearchWithHttpInfo(searchSeg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get segs base on search criteria. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSeg">Search detail which wants seg. (optional)</param>
        /// <returns>ApiResponse of List&lt;RetrieveSeg&gt;</returns>
        public ApiResponse< List<RetrieveSeg> > SegsSegSearchWithHttpInfo (SearchSeg searchSeg = null)
        {

            var localVarPath = "./api/v1/segs/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchSeg != null && searchSeg.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchSeg); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchSeg; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RetrieveSeg>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<RetrieveSeg>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RetrieveSeg>)));
        }

        /// <summary>
        /// Get segs base on search criteria. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSeg">Search detail which wants seg. (optional)</param>
        /// <returns>Task of List&lt;RetrieveSeg&gt;</returns>
        public async System.Threading.Tasks.Task<List<RetrieveSeg>> SegsSegSearchAsync (SearchSeg searchSeg = null)
        {
             ApiResponse<List<RetrieveSeg>> localVarResponse = await SegsSegSearchAsyncWithHttpInfo(searchSeg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get segs base on search criteria. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reviewer&lt;br/&gt; seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchSeg">Search detail which wants seg. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RetrieveSeg&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RetrieveSeg>>> SegsSegSearchAsyncWithHttpInfo (SearchSeg searchSeg = null)
        {

            var localVarPath = "./api/v1/segs/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchSeg != null && searchSeg.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchSeg); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchSeg; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RetrieveSeg>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<RetrieveSeg>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RetrieveSeg>)));
        }

        /// <summary>
        /// Get segs match based on search criteria &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reader
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segMatch">Seg match (optional)</param>
        /// <param name="retrieveDefault">if retrieveDefault - true then &#39;Foster Care to Success&#39; seg data will be returned (optional, default to true)</param>
        /// <returns>List&lt;SegMatchResult&gt;</returns>
        public List<SegMatchResult> SegsSegSegmatch (SegMatch segMatch = null, bool? retrieveDefault = null)
        {
             ApiResponse<List<SegMatchResult>> localVarResponse = SegsSegSegmatchWithHttpInfo(segMatch, retrieveDefault);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get segs match based on search criteria &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reader
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segMatch">Seg match (optional)</param>
        /// <param name="retrieveDefault">if retrieveDefault - true then &#39;Foster Care to Success&#39; seg data will be returned (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;SegMatchResult&gt;</returns>
        public ApiResponse< List<SegMatchResult> > SegsSegSegmatchWithHttpInfo (SegMatch segMatch = null, bool? retrieveDefault = null)
        {

            var localVarPath = "./api/v1/segs/match";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (retrieveDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retrieveDefault", retrieveDefault)); // query parameter
            if (segMatch != null && segMatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(segMatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = segMatch; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegSegmatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SegMatchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<SegMatchResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SegMatchResult>)));
        }

        /// <summary>
        /// Get segs match based on search criteria &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reader
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segMatch">Seg match (optional)</param>
        /// <param name="retrieveDefault">if retrieveDefault - true then &#39;Foster Care to Success&#39; seg data will be returned (optional, default to true)</param>
        /// <returns>Task of List&lt;SegMatchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<SegMatchResult>> SegsSegSegmatchAsync (SegMatch segMatch = null, bool? retrieveDefault = null)
        {
             ApiResponse<List<SegMatchResult>> localVarResponse = await SegsSegSegmatchAsyncWithHttpInfo(segMatch, retrieveDefault);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get segs match based on search criteria &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.reader
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segMatch">Seg match (optional)</param>
        /// <param name="retrieveDefault">if retrieveDefault - true then &#39;Foster Care to Success&#39; seg data will be returned (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;SegMatchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SegMatchResult>>> SegsSegSegmatchAsyncWithHttpInfo (SegMatch segMatch = null, bool? retrieveDefault = null)
        {

            var localVarPath = "./api/v1/segs/match";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (retrieveDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retrieveDefault", retrieveDefault)); // query parameter
            if (segMatch != null && segMatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(segMatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = segMatch; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegSegmatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SegMatchResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<SegMatchResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SegMatchResult>)));
        }

        /// <summary>
        /// Update segs status. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateStatus">Segs - object that needs to be updated (optional)</param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegsSegStatus (Guid? id, SegStatus updateStatus = null)
        {
             ApiResponse<ResponseInfo> localVarResponse = SegsSegStatusWithHttpInfo(id, updateStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update segs status. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateStatus">Segs - object that needs to be updated (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ApiResponse< ResponseInfo > SegsSegStatusWithHttpInfo (Guid? id, SegStatus updateStatus = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegApi->SegsSegStatus");

            var localVarPath = "./api/v1/segs/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateStatus != null && updateStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Update segs status. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateStatus">Segs - object that needs to be updated (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsSegStatusAsync (Guid? id, SegStatus updateStatus = null)
        {
             ApiResponse<ResponseInfo> localVarResponse = await SegsSegStatusAsyncWithHttpInfo(id, updateStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update segs status. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateStatus">Segs - object that needs to be updated (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsSegStatusAsyncWithHttpInfo (Guid? id, SegStatus updateStatus = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegApi->SegsSegStatus");

            var localVarPath = "./api/v1/segs/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateStatus != null && updateStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Update seg. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateSeg">seg - object that needs to be updated (optional)</param>
        /// <returns>ResponseInfo</returns>
        public ResponseInfo SegsSegUpdate (Guid? id, Seg updateSeg = null)
        {
             ApiResponse<ResponseInfo> localVarResponse = SegsSegUpdateWithHttpInfo(id, updateSeg);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update seg. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateSeg">seg - object that needs to be updated (optional)</param>
        /// <returns>ApiResponse of ResponseInfo</returns>
        public ApiResponse< ResponseInfo > SegsSegUpdateWithHttpInfo (Guid? id, Seg updateSeg = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegApi->SegsSegUpdate");

            var localVarPath = "./api/v1/segs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateSeg != null && updateSeg.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSeg); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSeg; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

        /// <summary>
        /// Update seg. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateSeg">seg - object that needs to be updated (optional)</param>
        /// <returns>Task of ResponseInfo</returns>
        public async System.Threading.Tasks.Task<ResponseInfo> SegsSegUpdateAsync (Guid? id, Seg updateSeg = null)
        {
             ApiResponse<ResponseInfo> localVarResponse = await SegsSegUpdateAsyncWithHttpInfo(id, updateSeg);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update seg. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Roles&lt;/b&gt;&lt;br/&gt;Denied Anonymous Access&lt;br/&gt;seg.admin
        /// </summary>
        /// <exception cref="SegApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Passes id</param>
        /// <param name="updateSeg">seg - object that needs to be updated (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInfo>> SegsSegUpdateAsyncWithHttpInfo (Guid? id, Seg updateSeg = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SegApi->SegsSegUpdate");

            var localVarPath = "./api/v1/segs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateSeg != null && updateSeg.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSeg); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSeg; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SegsSegUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ResponseInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInfo)));
        }

    }
}
