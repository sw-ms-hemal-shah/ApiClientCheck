/* 
 * Seg API
 *
 * Provide API for Manage Segs
 *
 * OpenAPI spec version: 1.0
 * Contact: vpatel@alliantcreditunion.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = component.netcore.apiclient.seg.Client.SwaggerDateConverter;

namespace component.netcore.apiclient.seg.Model
{
    /// <summary>
    /// SegMatch
    /// </summary>
    [DataContract]
    public partial class SegMatch :  IEquatable<SegMatch>
    {
        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Employer for value: Employer
            /// </summary>
            [EnumMember(Value = "Employer")]
            Employer = 1,
            
            /// <summary>
            /// Enum Association for value: Association
            /// </summary>
            [EnumMember(Value = "Association")]
            Association = 2,
            
            /// <summary>
            /// Enum Community for value: Community
            /// </summary>
            [EnumMember(Value = "Community")]
            Community = 3
        }

        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EligibilityClassEnum
        {
            
            /// <summary>
            /// Enum Employee for value: Employee
            /// </summary>
            [EnumMember(Value = "Employee")]
            Employee = 1,
            
            /// <summary>
            /// Enum Family for value: Family
            /// </summary>
            [EnumMember(Value = "Family")]
            Family = 2,
            
            /// <summary>
            /// Enum Member for value: Member
            /// </summary>
            [EnumMember(Value = "Member")]
            Member = 3,
            
            /// <summary>
            /// Enum Retiree for value: Retiree
            /// </summary>
            [EnumMember(Value = "Retiree")]
            Retiree = 4,
            
            /// <summary>
            /// Enum Merger for value: Merger
            /// </summary>
            [EnumMember(Value = "Merger")]
            Merger = 5,
            
            /// <summary>
            /// Enum HealthSavingsAccount for value: HealthSavingsAccount
            /// </summary>
            [EnumMember(Value = "HealthSavingsAccount")]
            HealthSavingsAccount = 6,
            
            /// <summary>
            /// Enum Internal for value: Internal
            /// </summary>
            [EnumMember(Value = "Internal")]
            Internal = 7
        }

        /// <summary>
        /// Allow valid Enum value.
        /// </summary>
        /// <value>Allow valid Enum value.</value>
        [DataMember(Name="eligibilityClass", EmitDefaultValue=false)]
        public EligibilityClassEnum? EligibilityClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SegMatch" /> class.
        /// </summary>
        /// <param name="retireeEmployerName">retireeEmployerName.</param>
        /// <param name="employerName">employerName.</param>
        /// <param name="employerCity">employerCity.</param>
        /// <param name="residentialCity">residentialCity.</param>
        /// <param name="type">Allow valid Enum value..</param>
        /// <param name="eligibilityClass">Allow valid Enum value..</param>
        /// <param name="searchText">searchText.</param>
        public SegMatch(string retireeEmployerName = default(string), string employerName = default(string), string employerCity = default(string), string residentialCity = default(string), TypeEnum? type = default(TypeEnum?), EligibilityClassEnum? eligibilityClass = default(EligibilityClassEnum?), string searchText = default(string))
        {
            this.RetireeEmployerName = retireeEmployerName;
            this.EmployerName = employerName;
            this.EmployerCity = employerCity;
            this.ResidentialCity = residentialCity;
            this.Type = type;
            this.EligibilityClass = eligibilityClass;
            this.SearchText = searchText;
        }
        
        /// <summary>
        /// Gets or Sets RetireeEmployerName
        /// </summary>
        [DataMember(Name="retireeEmployerName", EmitDefaultValue=false)]
        public string RetireeEmployerName { get; set; }

        /// <summary>
        /// Gets or Sets EmployerName
        /// </summary>
        [DataMember(Name="employerName", EmitDefaultValue=false)]
        public string EmployerName { get; set; }

        /// <summary>
        /// Gets or Sets EmployerCity
        /// </summary>
        [DataMember(Name="employerCity", EmitDefaultValue=false)]
        public string EmployerCity { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialCity
        /// </summary>
        [DataMember(Name="residentialCity", EmitDefaultValue=false)]
        public string ResidentialCity { get; set; }



        /// <summary>
        /// Gets or Sets SearchText
        /// </summary>
        [DataMember(Name="searchText", EmitDefaultValue=false)]
        public string SearchText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SegMatch {\n");
            sb.Append("  RetireeEmployerName: ").Append(RetireeEmployerName).Append("\n");
            sb.Append("  EmployerName: ").Append(EmployerName).Append("\n");
            sb.Append("  EmployerCity: ").Append(EmployerCity).Append("\n");
            sb.Append("  ResidentialCity: ").Append(ResidentialCity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EligibilityClass: ").Append(EligibilityClass).Append("\n");
            sb.Append("  SearchText: ").Append(SearchText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegMatch);
        }

        /// <summary>
        /// Returns true if SegMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of SegMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegMatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RetireeEmployerName == input.RetireeEmployerName ||
                    (this.RetireeEmployerName != null &&
                    this.RetireeEmployerName.Equals(input.RetireeEmployerName))
                ) && 
                (
                    this.EmployerName == input.EmployerName ||
                    (this.EmployerName != null &&
                    this.EmployerName.Equals(input.EmployerName))
                ) && 
                (
                    this.EmployerCity == input.EmployerCity ||
                    (this.EmployerCity != null &&
                    this.EmployerCity.Equals(input.EmployerCity))
                ) && 
                (
                    this.ResidentialCity == input.ResidentialCity ||
                    (this.ResidentialCity != null &&
                    this.ResidentialCity.Equals(input.ResidentialCity))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EligibilityClass == input.EligibilityClass ||
                    (this.EligibilityClass != null &&
                    this.EligibilityClass.Equals(input.EligibilityClass))
                ) && 
                (
                    this.SearchText == input.SearchText ||
                    (this.SearchText != null &&
                    this.SearchText.Equals(input.SearchText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RetireeEmployerName != null)
                    hashCode = hashCode * 59 + this.RetireeEmployerName.GetHashCode();
                if (this.EmployerName != null)
                    hashCode = hashCode * 59 + this.EmployerName.GetHashCode();
                if (this.EmployerCity != null)
                    hashCode = hashCode * 59 + this.EmployerCity.GetHashCode();
                if (this.ResidentialCity != null)
                    hashCode = hashCode * 59 + this.ResidentialCity.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EligibilityClass != null)
                    hashCode = hashCode * 59 + this.EligibilityClass.GetHashCode();
                if (this.SearchText != null)
                    hashCode = hashCode * 59 + this.SearchText.GetHashCode();
                return hashCode;
            }
        }
    }

}
